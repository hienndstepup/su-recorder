-- =============================================
-- T·∫°o b·∫£ng settings ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i h·ªá th·ªëng
-- =============================================

-- T·∫°o b·∫£ng settings
CREATE TABLE IF NOT EXISTS settings (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    key VARCHAR(100) NOT NULL UNIQUE,
    value TEXT NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- T·∫°o trigger ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t updated_at
CREATE TRIGGER update_settings_updated_at
    BEFORE UPDATE ON settings
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- T·∫°o index cho key ƒë·ªÉ t√¨m ki·∫øm nhanh
CREATE INDEX IF NOT EXISTS idx_settings_key ON settings(key);

-- Th√™m d·ªØ li·ªáu m·∫´u
INSERT INTO settings (key, value, description) VALUES 
    ('maintenance_mode', 'false', 'Tr·∫°ng th√°i b·∫£o tr√¨ h·ªá th·ªëng (true/false)'),
    ('maintenance_message', 'H·ªá th·ªëng ƒëang ƒë∆∞·ª£c b·∫£o tr√¨ ƒë·ªÉ c·∫£i thi·ªán d·ªãch v·ª•. Vui l√≤ng quay l·∫°i sau.', 'Th√¥ng b√°o b·∫£o tr√¨ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng'),
    ('maintenance_estimated_time', 'Ch√∫ng t√¥i s·∫Ω ho√†n t·∫•t trong th·ªùi gian s·ªõm nh·∫•t c√≥ th·ªÉ.', 'Th·ªùi gian d·ª± ki·∫øn ho√†n th√†nh b·∫£o tr√¨'),
    ('site_title', 'SU Recorder', 'Ti√™u ƒë·ªÅ trang web'),
    ('site_description', 'H·ªá th·ªëng ghi √¢m v√† qu·∫£n l√Ω', 'M√¥ t·∫£ trang web')
ON CONFLICT (key) DO NOTHING;

-- Thi·∫øt l·∫≠p RLS (Row Level Security)
ALTER TABLE settings ENABLE ROW LEVEL SECURITY;

-- Policy: Ch·ªâ admin c√≥ th·ªÉ xem v√† ch·ªânh s·ª≠a settings
CREATE POLICY "Admin can view settings" ON settings
    FOR SELECT USING (is_admin());

CREATE POLICY "Admin can update settings" ON settings
    FOR UPDATE USING (is_admin());

CREATE POLICY "Admin can insert settings" ON settings
    FOR INSERT WITH CHECK (is_admin());

-- T·∫°o function ƒë·ªÉ l·∫•y gi√° tr·ªã setting
CREATE OR REPLACE FUNCTION get_setting(setting_key TEXT)
RETURNS TEXT AS $$
DECLARE
    setting_value TEXT;
BEGIN
    SELECT value INTO setting_value 
    FROM settings 
    WHERE key = setting_key;
    
    RETURN COALESCE(setting_value, '');
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- T·∫°o function ƒë·ªÉ c·∫≠p nh·∫≠t gi√° tr·ªã setting
CREATE OR REPLACE FUNCTION update_setting(setting_key TEXT, setting_value TEXT)
RETURNS BOOLEAN AS $$
BEGIN
    -- Ki·ªÉm tra quy·ªÅn admin
    IF NOT is_admin() THEN
        RETURN FALSE;
    END IF;
    
    -- C·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi setting
    INSERT INTO settings (key, value) 
    VALUES (setting_key, setting_value)
    ON CONFLICT (key) 
    DO UPDATE SET 
        value = EXCLUDED.value,
        updated_at = NOW();
    
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- T·∫°o function ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i b·∫£o tr√¨
CREATE OR REPLACE FUNCTION is_maintenance_mode()
RETURNS BOOLEAN AS $$
DECLARE
    maintenance_value TEXT;
BEGIN
    SELECT value INTO maintenance_value 
    FROM settings 
    WHERE key = 'maintenance_mode';
    
    RETURN COALESCE(maintenance_value, 'false') = 'true';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Comment cho b·∫£ng v√† c√°c function
COMMENT ON TABLE settings IS 'B·∫£ng l∆∞u tr·ªØ c√°c c√†i ƒë·∫∑t h·ªá th·ªëng';
COMMENT ON COLUMN settings.key IS 'Kh√≥a c√†i ƒë·∫∑t (duy nh·∫•t)';
COMMENT ON COLUMN settings.value IS 'Gi√° tr·ªã c√†i ƒë·∫∑t';
COMMENT ON COLUMN settings.description IS 'M√¥ t·∫£ c√†i ƒë·∫∑t';

COMMENT ON FUNCTION get_setting(TEXT) IS 'L·∫•y gi√° tr·ªã c·ªßa m·ªôt setting theo key';
COMMENT ON FUNCTION update_setting(TEXT, TEXT) IS 'C·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa m·ªôt setting (ch·ªâ admin)';
COMMENT ON FUNCTION is_maintenance_mode() IS 'Ki·ªÉm tra tr·∫°ng th√°i b·∫£o tr√¨ h·ªá th·ªëng';

-- =============================================
-- Thi·∫øt l·∫≠p Realtime cho b·∫£ng settings
-- =============================================

-- B·∫≠t Realtime cho b·∫£ng settings
ALTER PUBLICATION supabase_realtime ADD TABLE settings;

-- T·∫°o function ƒë·ªÉ broadcast thay ƒë·ªïi settings
CREATE OR REPLACE FUNCTION broadcast_setting_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Broadcast thay ƒë·ªïi ƒë·∫øn t·∫•t c·∫£ clients
    PERFORM pg_notify(
        'settings_changed',
        json_build_object(
            'key', NEW.key,
            'value', NEW.value,
            'old_value', OLD.value,
            'timestamp', NOW()
        )::text
    );
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- T·∫°o trigger ƒë·ªÉ broadcast khi c√≥ thay ƒë·ªïi
CREATE TRIGGER settings_change_broadcast
    AFTER UPDATE ON settings
    FOR EACH ROW
    EXECUTE FUNCTION broadcast_setting_change();

-- T·∫°o function ƒë·ªÉ l·∫•y t·∫•t c·∫£ settings (cho realtime subscription)
CREATE OR REPLACE FUNCTION get_all_settings()
RETURNS TABLE(key TEXT, value TEXT, description TEXT) AS $$
BEGIN
    RETURN QUERY
    SELECT s.key, s.value, s.description
    FROM settings s
    ORDER BY s.key;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- T·∫°o function ƒë·ªÉ ki·ªÉm tra v√† broadcast maintenance mode
CREATE OR REPLACE FUNCTION check_maintenance_status()
RETURNS TABLE(is_maintenance BOOLEAN, message TEXT) AS $$
DECLARE
    maintenance_value TEXT;
    is_maintenance BOOLEAN;
BEGIN
    SELECT value INTO maintenance_value 
    FROM settings 
    WHERE key = 'maintenance_mode';
    
    is_maintenance := COALESCE(maintenance_value, 'false') = 'true';
    
    RETURN QUERY
    SELECT 
        is_maintenance,
        CASE 
            WHEN is_maintenance THEN 'H·ªá th·ªëng ƒëang b·∫£o tr√¨'
            ELSE 'H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng'
        END;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Comment cho c√°c function m·ªõi
COMMENT ON FUNCTION broadcast_setting_change() IS 'Broadcast thay ƒë·ªïi settings ƒë·∫øn t·∫•t c·∫£ clients qua pg_notify';
COMMENT ON FUNCTION get_all_settings() IS 'L·∫•y t·∫•t c·∫£ settings ƒë·ªÉ subscribe realtime';
COMMENT ON FUNCTION check_maintenance_status() IS 'Ki·ªÉm tra tr·∫°ng th√°i b·∫£o tr√¨ v√† tr·∫£ v·ªÅ message';

-- Ki·ªÉm tra k·∫øt qu·∫£
DO $$
BEGIN
    RAISE NOTICE '‚úÖ B·∫£ng settings ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!';
    RAISE NOTICE 'üìã C√°c function ƒë√£ ƒë∆∞·ª£c t·∫°o: get_setting(), update_setting(), is_maintenance_mode()';
    RAISE NOTICE 'üîí RLS policies ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p (ch·ªâ admin c√≥ th·ªÉ truy c·∫≠p)';
    RAISE NOTICE 'üìä D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c th√™m v√†o';
    RAISE NOTICE 'üîÑ Realtime ƒë√£ ƒë∆∞·ª£c b·∫≠t cho b·∫£ng settings';
    RAISE NOTICE 'üì° Trigger broadcast_setting_change() ƒë√£ ƒë∆∞·ª£c t·∫°o';
    RAISE NOTICE 'üì° Function get_all_settings() ƒë√£ ƒë∆∞·ª£c t·∫°o cho subscription';
    RAISE NOTICE 'üì° Function check_maintenance_status() ƒë√£ ƒë∆∞·ª£c t·∫°o';
END $$;
